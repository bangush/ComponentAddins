<?xml version="1.0"?>
<Template author       = "William MacDonald"
          created      = "05/29/2014"
          lastModified = "05/30/2014"
          version      = "1.0">
	
	<!-- Template Header -->
	<TemplateConfiguration>
		<Name>Windows COM Component Library</Name>
		<Category>C#</Category>
		<Subcategory>${res:Templates.File.Categories.WindowsApplications}</Subcategory>
		<Icon>C#.Project.Form</Icon>
		<Description>${res:Templates.Project.WindowsApplication.Description}</Description>
		<SupportedTargetFrameworks>v2.0</SupportedTargetFrameworks>
	</TemplateConfiguration>
	
	<!-- Actions -->
	<Actions>
		<Open filename = "COMComponent1.cs"/>
	</Actions>
	
	<Project language = "C#">
		<ProjectItems>
		    <Reference Include="System" />
		    <Reference Include="System.Drawing" />
		    <Reference Include="System.Windows.Forms" />
		</ProjectItems>
		
		<PropertyGroup>
			<OutputType>Library</OutputType>
			<AppDesignerFolder>Properties</AppDesignerFolder>
			<RegisterForComInterop>true</RegisterForComInterop>
		</PropertyGroup>
		
		<Files>
		<!-- Designer file must come first, so the design tab is shown correctly -->
<File name="COMComponent1.Designer.cs" DependentUpon="COMComponent1.cs" language="C#"><![CDATA[${StandardHeader.C#}
namespace ${StandardNamespace}
{
	partial class COMComponent1
	{
		/// <summary>
		/// Designer variable used to keep track of non-visual components.
		/// </summary>
		private System.ComponentModel.IContainer components = null;
		
		/// <summary>
		/// Disposes resources used by the Component.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing)
		{
			if (disposing) {
				if (components != null) {
					components.Dispose();
				}
			}
			base.Dispose(disposing);
		}
		
		/// <summary>
		/// This method is required for Windows Component designer support.
		/// Do not change the method contents inside the source code editor. The Forms designer might
		/// not be able to load this method if it was changed manually.
		/// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
        }
	}
}
]]></File>
		<File name="COMComponent1.cs" language="C#"><![CDATA[${StandardHeader.C#}
namespace ${StandardNamespace}
{
    using System;
    using System.Text;
    using System.ComponentModel;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using Microsoft.Win32;
    
	/// <summary>
	/// Description of COMComponent1.
	/// </summary>
    [Guid(COMComponent1.guidCOMComponent1),
    ProgId("${StandardNamespace}.COMComponent1"),
    ClassInterface(ClassInterfaceType.AutoDispatch),
    ComSourceInterfaces(typeof(ICOMComponent1Events)),
    ComDefaultInterface(typeof(ICOMComponent1Wrapper)),
    ComVisible(true)]
	public partial class COMComponent1 : Component, ICOMComponent1Wrapper
	{    
		#region COM Guid's
        public const string guidCOMComponent1 = "${GUID}";
        public const string guidICOMComponent1Wrapper = "${GUID}";
        public const string guidICOMComponent1Events = "${GUID}";
		#endregion

        #region COM Contructors
		public COMComponent1()
		{
			//
			// The InitializeComponent() call is required for Windows Forms designer support.
			//
			InitializeComponent();
			
			//
			// TODO: Add constructor code after the InitializeComponent() call.
			//
		}

		public COMComponent1(IContainer container)
		{
			container.Add(this); 

			//
			// The InitializeComponent() call is required for Windows Forms designer support.
			//
			InitializeComponent();
			
			//
			// TODO: Add constructor code after the InitializeComponent() call.
			//
		}
        #endregion

        #region COM Members
        private string name;

        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                this.name = value;
            }
        }
        
        public void Open(string info)
        {
            System.Console.Out.WriteLine("Open");
        }
        
        public void Close()
        {
            if (this.Closing != null)
            {
                this.Closing("Done");
            }
            
            System.Console.Out.WriteLine("Close");
            
            if (this.Closed != null)
            {
                this.Closed();
            }
        }
        #endregion

        #region COM Events        
        public event COMComponent1EventHandler Closing;
        
        public event COMComponent1EventHandler2 Closed;
        #endregion

        #region COM Registration
        ///	<summary>
        ///	Register the class as a	control	and	set	it's CodeBase entry
        ///	</summary>
        ///	<param name="key">The registry key of the control</param>
        [ComRegisterFunction()]
        protected static void RegisterClass(string key)
        {
            // Strip off HKEY_CLASSES_ROOT\ from the passed key as I don't need it
            StringBuilder sb = new StringBuilder(key);
            sb.Replace(@"HKEY_CLASSES_ROOT\", "");

            // Open the CLSID\{guid} key for write access
            RegistryKey k = Registry.ClassesRoot.OpenSubKey(sb.ToString(), true);

            // And create	the	'Control' key -	this allows	it to show up in
            // the ActiveX control container
            RegistryKey ctrl = k.CreateSubKey("Control");
            ctrl.Close();

            // Next create the CodeBase entry	- needed if	not	string named and GACced.
            RegistryKey inprocServer32 = k.OpenSubKey("InprocServer32", true);
            inprocServer32.SetValue("CodeBase", Assembly.GetExecutingAssembly().CodeBase);
            inprocServer32.Close();

            // Finally close the main	key
            k.Close();
        }

        ///	<summary>
        ///	Called to unregister the control
        ///	</summary>
        ///	<param name="key">Tke registry key</param>
        [ComUnregisterFunction()]
        protected static void UnregisterClass(string key)
        {
            StringBuilder sb = new StringBuilder(key);
            sb.Replace(@"HKEY_CLASSES_ROOT\", "");

            // Open	HKCR\CLSID\{guid} for write	access
            RegistryKey k = Registry.ClassesRoot.OpenSubKey(sb.ToString(), true);

            if (k != null)
            {
                // Delete the 'Control'	key, but don't throw an	exception if it	does not exist
                k.DeleteSubKey("Control", false);

                // Next	open up	InprocServer32
                RegistryKey inprocServer32 = k.OpenSubKey("InprocServer32", true);

                // And delete the CodeBase key,	again not throwing if missing
                k.DeleteSubKey("CodeBase", false);

                // Finally close the main key
                k.Close();
            }
        }      
        #endregion
	}
}
]]></File>
		<File name="ICOMComponent1.cs" DependentUpon="COMComponent1.cs" language="C#"><![CDATA[${StandardHeader.C#}
namespace ${StandardNamespace}
{
    using System;
    using System.Runtime.InteropServices;
        
	#region COM Delegates
    public delegate void COMComponent1EventHandler(string status);    
    
    public delegate void COMComponent1EventHandler2();
    #endregion
    
    #region COM Wrapper Interface
	/// <summary>
	/// Description of ICOMComponent1Wrapper.
	/// </summary>
    [Guid(COMComponent1.guidICOMComponent1Wrapper),
    InterfaceType(ComInterfaceType.InterfaceIsIDispatch),
    ComVisible(true)]
	public interface ICOMComponent1Wrapper
	{
        [DispId(10)]
        string Name
        {
            get;
            set;
        }   

        [DispId(30)]
        void Open(string info);             
        
        [DispId(31)]
        void Close();
	}
    #endregion

    #region COM Event Interface
	/// <summary>
	/// Description of ICOMComponent1Events.
	/// </summary>
    [Guid(COMComponent1.guidICOMComponent1Events),
    InterfaceType(ComInterfaceType.InterfaceIsIDispatch),
    ComVisible(true)]
	public interface ICOMComponent1Events
	{
        [DispId(20)]
        void Closing(string status);
        
        [DispId(21)]
        void Closed();
	}
    #endregion    
}
]]></File>

			<File name="Properties\AssemblyInfo.cs" src="DefaultCOMAssemblyInfo.cs"/>
		</Files>
	</Project>
</Template>
